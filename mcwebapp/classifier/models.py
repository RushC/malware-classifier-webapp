from django.db import models
from django.db.models.signals import pre_delete, pre_save
from django.dispatch import receiver
from django.utils import timezone

import os

# Note: You can see find the Database Schema in the docs folder at the root of
#       the web app directory.

###############################################################################

# The amount of time until Files and JobResults expire.
_expiration_time = timezone.timedelta(minutes=20)

###############################################################################

class SampleClass(models.Model):
    """The sample class table holds all of the possible class designations for
    every file type. This is the only table whose rows should be persistent.
    """
    
    # Note: Django does not naturally support composite keys. 
    class Meta:
        unique_together = (('sample_class_label', 'file_type'),)
    
    # ID (Not referenced in schema; needed for lack of composite key support)
    sample_class_id = models.AutoField(primary_key=True)
    
    # Label (Replaces ID in schema)
    sample_class_label = models.IntegerField()
    
    # File Type
    file_type = models.TextField()
    
    # Class Name
    name = models.CharField(max_length=50)
    
    # Description of the class.
    description = models.TextField(blank=True, null=True)
    
    # URL to a page with more information on the class.
    link = models.URLField(blank=True, null=True)

###############################################################################

class Job(models.Model):
    """The Job table contains a list of all classification jobs that are
    either running or have been completed. Jobs should be added whenever a
    client sends a valid request for a classification. Jobs should be removed
    right after the results of the Job were sent to the client in order to save
    space.
    """
    
    # ID
    job_id = models.AutoField(primary_key=True)
    
###############################################################################
    
def job_result_expiration():
    """Return the expiration time for a newly added JobResult."""
    return timezone.now() + _expiration_time

class JobResult(models.Model):
    """The JobResult table holds the results for a specific job. An entry for
    a job should be added whenever the classification job is complete. The
    entry should be removed whenever the results are sent to the client.
    """
    
    # ID
    job_result_id = models.AutoField(primary_key=True)
    
    # The job that the result is for.
    job = models.OneToOneField(Job, on_delete=models.CASCADE)
    
    # The classification result for the job.
    sample_class = models.ForeignKey(SampleClass)
    
    # The confidence the model has in the classification.
    confidence = models.DecimalField(decimal_places=4, max_digits=5)
    
    # The title of the most similar sample found for the file.
    similar_sample = models.TextField(blank=True, null=True)
    
    # The similarity of the similar sample.
    similarity = models.FloatField(blank=True, null=True)
    
    # The optional image file generated during classification. The image should
    # be formatted as a base-64 encoded image.
    image = models.TextField(blank=True, null=True)
    
    # The optional assembly representation of the classified file.
    asm_view = models.TextField(blank=True, null=True)
    
    # The optional hexadecimal representation of the classified file.
    hex_view = models.TextField(blank=True, null=True)
    
    # The time when the job result will be considered expired. This filed will
    # automatically be set.
    expiration = models.DateTimeField(default=job_result_expiration)
    
@receiver(pre_save, sender=JobResult)
def delete_expired_jobresults(sender, **kwargs):
    """Called right before a new JobResult record is added. Delete any jobs
    in the database whose job results have expired.
    """
    expired = JobResult.objects.filter(expiration__lte=timezone.now())
    for jobresult in expired.all():
        jobresult.job.delete()
   
###############################################################################

class JobUpdate(models.Model):
    """The job update table contains all of the updates that can be sent out
    to clients whenever they request information about a particular job. Job
    updates should be cleared whenver they are sent to the client. Job updates
    should be added during the classification process.
    """
    
    # ID
    job_update_id = models.AutoField(primary_key=True)
    
    # Job that the update is for.
    job = models.ForeignKey(Job, on_delete=models.CASCADE)
    
    # Brief message describing the update (e.g. 'Parsing features...').
    message = models.CharField(max_length=50)
    
    # The time that the update happened. Used to ensure the messages are sent
    # to the client in the correct order. This field is automatically added, so
    # there is no need to set it.
    time = models.DateTimeField(auto_now_add=True)
    
###############################################################################
    
def file_expiration():
    """Return the expiration time for a newly added JobResult."""
    return timezone.now() + _expiration_time

class File(models.Model):
    """The File table contains each of the files that are uploaded to the
    server. If a file is saved in the files directory, it should be added to
    the table. Likewise, if a file is deleted in the files directory, it
    should be removed here as well.
    """
    
    # Name of the file as it appears in the file folder.
    file_name = models.TextField()
    
    # The type of the file (e.g. 'exe', 'js', 'apk'). Needed to determine how
    # the classification will be done.
    file_type = models.CharField(max_length=10)
    
    # Job for classifying the file. May be empty.
    job = models.OneToOneField(Job, on_delete=models.CASCADE, blank=True, 
                               null=True)
                               
    # The time when the file will be considered expired. This will
    # automatically be set.
    expiration = models.DateTimeField(default=file_expiration)
                        
                               
# The directory where all samples should be saved.
_samples_folder = r'classifier/samples'

@receiver(pre_save, sender=File)
def delete_expired_files(sender, **kwargs):
    """Called right before a file record is added. Deletes all expired files in
    the database.
    """
    File.objects.filter(expiration__lte=timezone.now()).delete()
        
        
                               
@receiver(pre_delete, sender=File)
def delete_file(sender, **kwargs):
    """Called whenever a file object is deleted from the database. Deletes the
    file from the file system that corresponds to the deleted file record.
    """
    
    # Delete file
    file = kwargs['instance']
    file_name = os.path.join(_samples_folder, file.file_name)
    
    try:
        os.remove(file_name)
    except:
        print('Could not delete the file {0}. It likely never existed.'.format(
                                                                    file_name))
    