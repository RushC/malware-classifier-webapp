from django.db import models

# Note: You can see find the Database Schema in the docs folder at the root of
#       the web app directory.

###############################################################################

class SampleClass(models.Model):
    """The sample class table holds all of the possible class designations for
    every file type. This is the only table whose rows should be persistent.
    """
    
    # Note: Django does not naturally support composite keys. 
    class Meta:
        unique_together = (('sample_class_label', 'file_type'),)
    
    # ID (Not referenced in schema; needed for lack of composite key support)
    sample_class_id = models.AutoField(primary_key=True)
    
    # Label (Replaces ID in schema)
    sample_class_label = models.IntegerField()
    
    # File Type
    file_type = models.TextField()
    
    # Class Name
    name = models.CharField(max_length=50)
    
    # Description of the class.
    description = models.TextField(blank=True, null=True)
    
    # URL to a page with more information on the class.
    link = models.URLField(blank=True, null=True)

###############################################################################

class JobResult(models.Model):
    """The JobResult table holds the results for a specific job. An entry for
    a job should be added whenever the classification job is complete. The
    entry should be removed whenever the results are sent to the client.
    """
    
    # ID
    job_result_id = models.AutoField(primary_key=True)
    
    # The classification result for the job.
    sample_class = models.ForeignKey(SampleClass)
    
    # The confidence the model has in the classification.
    confidence = models.DecimalField(decimal_places=4, max_digits=5)
    
    # The optional image file generated during classification. The image should
    # be formatted as a base-64 encoded image.
    image = models.TextField(blank=True, null=True)
    
    # The optional hexadecimal representation of the classified file.
    hex_view = models.TextField(blank=True, null=True)

###############################################################################

class Job(models.Model):
    """The Job table contains a list of all classification jobs that are
    either running or have been completed. Jobs should be added whenever a
    client sends a valid request for a classification. Jobs should be removed
    right after the results of the Job were sent to the client in order to save
    space.
    """
    
    # ID
    job_id = models.AutoField(primary_key=True)
    
    # Results for the job. Should be empty until the job is completed.
    job_result = models.OneToOneField(JobResult, on_delete=models.CASCADE, 
                                      blank=True, null=True)
    
###############################################################################

class JobUpdate(models.Model):
    """The job update table contains all of the updates that can be sent out
    to clients whenever they request information about a particular job. Job
    updates should be cleared whenver they are sent to the client. Job updates
    should be added during the classification process.
    """
    
    # ID
    job_update_id = models.AutoField(primary_key=True)
    
    # Job that the update is for.
    job = models.ForeignKey(Job, on_delete=models.CASCADE)
    
    # Brief message describing the update (e.g. 'Parsing features...').
    message = models.CharField(max_length=50)
    
    # The time that the update happened. Used to ensure the messages are sent
    # to the client in th ecorrect order. This field is automaticall added, so
    # there is no need to set it.
    time = models.DateTimeField(auto_now_add=True)
    
###############################################################################

class File(models.Model):
    """The File table contains each of the files that are uploaded to the
    server. If a file is saved in the files directory, it should be added to
    the table. Likewise, if a file is deleted in the files directory, it
    should be removed here as well.
    """
    
    # Name of the file as it appears in the file folder.
    file_name = models.TextField()
    
    # The type of the file (e.g. 'exe', 'js', 'apk'). Needed to determine how
    # the classification will be done.
    file_type = models.CharField(max_length=10)
    
    # Job for classifying the file. May be empty.
    job = models.OneToOneField(Job, on_delete=models.CASCADE, blank=True, 
                               null=True)
    