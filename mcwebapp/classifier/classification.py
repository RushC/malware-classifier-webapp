from .malware_classifier.malware_classifier.classification import load_classifier
from .models import JobResult, JobUpdate, SampleClass

import base64
import os

###############################################################################

# The folder where all of the classifiers are stored.
_classifiers_folder = 'classifier/classifiers'

# A temp folder for storing temporary files. All files stored here better get
# cleaned up. 
_temp_folder = 'classifier/temp'

###############################################################################

def classify_exe(sample, job):
    """Classify the sample for the specified job."""
    
    # Note: In order to keep the client updated, we can this process in stages 
    #       instead of just implementing some crazy one liner. Luckily, thanks
    #       to the memoize functionality, we should not see much of a
    #       performance hit due to some redundance.
    
    # Working job result.
    job_result = JobResult()
    
    # Create the hex view for the sample.
    update(job, 'Generating hex view...')
    
    job_result.hex_view = sample.hex_view_formatted()
    
    # Create the image for the sample. In order to retireve the properly
    # formatted image data, we can save a png file, load it back in, and encode
    # the contents in base64. When a client receives this string, they can set
    # the src of an img element directly to it to display the image.
    update(job, 'Creating image...')
    
    image_file_path = os.path.join(_temp_folder, sample.identifier)
    sample.save_image(image_file_path)
    
    image_file_path += '.png'    # save_image appends the .png extension
    with open(image_file_path, 'rb') as file:
        job_result.image = base64.b64encode(file.read())
        
    os.remove(image_file_path)   # Cleaning up temp like a good samaratin
    
    # Extract all of the features from the sample.
    update(job, 'Extracting features...')

    features = sample.features()
    
    # Classify the sample.
    update(job, 'Classifying sample...')
    
    classifier_path = os.path.join(_classifiers_folder, 'exe.clsf')
    classifier = load_classifier(classifier_path)
    
    classification = classifier.classify(features)
    job_result.confidence = classifier.predict(features)[int(classification)-1]
    job_result.sample_class = SampleClass.objects.get(
                                  sample_class_label=classification, 
                                  file_type='exe')
    
    # Save the job results.
    job_result.save()
    job.job_result = job_result
    job.save()
    
###############################################################################

def update(job, message):
    """Create a job update with the specified message for the job with the 
    specified ID.
    """
    JobUpdate(job=job, message=message).save()
    