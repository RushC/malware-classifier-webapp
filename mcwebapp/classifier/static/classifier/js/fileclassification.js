/**
 * This script containts the logic for classifying the uploaded file.
 * This script relies on the fileID variable from the filevalidation.js
 * script.
 */

// The number of milliseconds between requests for updates.
var UPDATES_TIMEOUT = 1000;

/**
 * Called whenever the classify button is clicked. Sends a request to the
 * server to classify the uploaded file.
 *
 * This function is assumed to only be called when a file has already been
 * validated.
 */
function classifyFile() {
    
    // Make sure the file ID is not null (you can never be too careful).
    if (!this.fileID) {
        console.error('Classify button clicked without a set ID');
        return;
    }
    
    // Send a request to the server to classify the validated file.
    $.post('/classify', { ID: this.fileID }).done(classificationRequestAccepted)
                                            .error(classificationRequestRejected);
}

/**
 * Called whenever the request for the file classification is accepted by
 * the server. Clears the upload card and begins listening for and
 * displaying the progress of the classification.
 */
function classificationRequestAccepted() {
    
    // Hide upload card.
    hideUploadCard();
    
    // Request update from the server.
    setTimeout(requestUpdate, this.UPDATES_TIMEOUT);
}

/**
 * Called whenever the request for the file classifcation is given an
 * error response. Indicates to the user that an error occured and allows
 * them to try again.
 */
function classificationRequestRejected() {
    console.error('rejected');
}

/**
 * Sends a request for an update to the server.
 */
function requestUpdate() {
    
    $.get('/classify/result', { ID: this.fileID })
    .done(function(response) {
        
        response = JSON.parse(response);
        
        if (response.Finished)
            displayResults(response);
        else
            displayUpdates(response.Updates);
    });
}

/**
 * Displays the results of the classification.
 */
function displayResults(results) {
    
    // Hide update log.
    hideLog();
    
    // Display results.
    showResults(results);
}

/**
 * Displays the updates received from the server and makes another request
 * for more updates.
 */
function displayUpdates(updates) {
    
    // Add each message to the update log.
    for (var i = 0; i < updates.length; i++)
        updateLog(updates[i]);
    
    // Schedule another update request.
    setTimeout(requestUpdate, this.UPDATES_TIMEOUT);
}