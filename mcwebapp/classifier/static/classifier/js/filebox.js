/**
 * This script contains functions for handling file input using a file-box div
 * and a hidden #file-input file input element.
 *
 * Other scripts can set the onFileSet function to be alerted whenever the user selects a new
 * file.
 */

// The currently selected file.
var file = null;

// Event handler for when the selected file is changed. Includes the
// file that is set as the parameter.
var onFileSet = null;

/**
 * Called whenever the user drags data over the file box. Checks whether
 * or not a file is being dragged.
 */
function checkDragData(event) {
    
    // Prevent default browser behavior.
    event.preventDefault();
    
    // Ensure only one file is being dragged.
    if (event.dataTransfer.items.length != 1 || event.dataTransfer.items[0].kind !== 'file') {
        event.dropEffect = "none";
        return;
    }
    
    // If there is a timer set to remove the visual indication, stop it. If there
    // isn't, that means the visual indication has not been set, so set it.
    if (removeFileBoxAcceptance.timer) {
        clearTimeout(removeFileBoxAcceptance.timer);
        removeFileBoxAcceptance.timer = null;
    }
    else
        $('#file-box').addClass('allow-drop');
    
    // Indicate that the data can be copied.
    event.dropEffect = "copy";
    return;
}

/**
 * Called when a user drops a file in the file box. Retrieves the file from the 
 * drop operation.
 */
function getDroppedFile(event) {
    
    // Prevent the browser's default behavior.
    event.preventDefault();
    
    // Remove the file box's visual indicator.
    $('#file-box').removeClass('allow-drop'); 
    
    // Retrieve the dropped file as the file input.
    var file = event.dataTransfer.items[0].getAsFile();
    setFile(file)
}

/**
 * Called when the file input's selected file changes. Sets the currently
 * selected file to whatever the file was changed to.
 */
function onFileChanged(event) {

    if (event.target.files.length == 0)
        setFile(null)
        
    else
        setFile(event.target.files[0])
}

/**
 * Called whenever the file box is clicked.
 *
 * Opens the file dialog for the file input.
 */
function openFileDialog() {
    
    // Simulate a click on the actual file input.
    $('#file-input').click()
}

/**
 * Sets a timer to remove the file box's visual indication of acceptance unless
 * the timer is stopped.
 */
function removeFileBoxAcceptance() {
    
    // Clear any existing timer.
    clearTimeout(removeFileBoxAcceptance.timer);
    
    // Start timer.
    removeFileBoxAcceptance.timer = setTimeout(function() { 
        $('#file-box').removeClass('allow-drop'); 
    }, 100);
}

/**
 * Sets the currently selected file.
 */
function setFile(file) {
    
    // Set selected file.
    this.file = file;
    
    // Update the file box to reflect the change.
    updateFileBox(file);
    
    // Call the file set event.
    if (onFileSet)
        onFileSet(file)
}

/**
 * Called whenever a new file is selected. Updates the file box element
 * to reflect the file change.
 */
function updateFileBox(file) {
    
    // Updates the title and text of the file box.
    function update(title, text) {
        
        $('#file-box > .card-content > .card-title').html(title);
        $('#file-box > .card-content > p').html(text);
    }
    
    // Check if no file is selected.
    if (file === null) {
        update("No file selected", 
               "Click to open a file dialog or drag a file here.")
        return;
    }
    
    // Use the file name as the title.
    update(file.name,
           "Congratulations on picking your first file!");    
}