/**
 * This script contains the logic for validating a selected file and deciding
 * if it can be classified or not. This script relies on the onFileSet and 
 * updateFileBox functions defined in the filebox.js script.
 */

// The ID sent back from the server to reference the uploaded file if the file
// was valid.
var fileID = null;

/**
 * Called whenever the selected file is changed. Sends the file to the server
 * for validation.
 */
this.onFileSet = function(file) {
    
    // Hide the tool buttons if necessary.
    hideToolButtons();
    
    // Ensure a file is selected.
    if (!file) {
        updateFileBox('No file selected',
                      'Click to open a file dialog or drag a file here.',
                      'no-file');
        return;
    }
    
    // If a previous request has not finished yet, abort it. We no longer
    // care.
    if (this.previousValidationRequest && 
        this.previousValidationRequest.readyState != 4) {
        
        // Remove the error event handler, since the result is expected.
        this.previousValidationRequest.onerror = null;
        this.previousValidationRequest.abort();
    }
    
    // Update the file box to indicate that the file is being validated.
    updateFileBox(file.name,
                  'Validating file... This should only take a moment.',
                  'validating-file');
    
    // Send a request to the server to validate the file. The validate service
    // expects a file passed in a set of form data with the name 'file'.
    data = new FormData();
    data.append('file', file)
    
    request = new XMLHttpRequest();
    request.open('POST', '/validate', true);
    request.onload = checkValidationResults;
    request.onerror = indicateInvalidFile;
    request.send(data);
    
    // Save the sent request in case it needs to be aborted later.
    this.previousValidationRequest = request;
}

/**
 * Called when the request to the server to check the selected file is
 * successfully completed. Checks whether or not the server deemed the
 * file as usable.
 */
function checkValidationResults(response) {
    
    // Parse response object.
    response = JSON.parse(response.target.response)
        
    // Check if the file was invalid.
    if (!response.Valid) {
        indicateInvalidFile();
        return;
    }
    
    // Since the file was valid, the server included an ID to reference
    // the uploaded file so that we wouldn't need to upload the file
    // again. This needs to be saved and sent when we ask to classify
    // the file.
    window.fileID = response.ID;
    indicateValidFile();
}

/**
 * Called whenever the fill is determined to be valid. This can only happen
 * if the server responds to a validation request and says the file is
 * valid. Styles the #file-box to indicate the file was valid.
 */
function indicateValidFile() {
    
    // Update file box.
    updateFileBox(undefined,
                  'File is valid!',
                  'valid-file');
    
    // Show tool buttons.
    showToolButtons();
}

/**
 * Called whenever the file is determined to be invalid. This can be because
 * the server sent back a failing status code or because the server said that
 * the file was invalid. Styles the #file-box to indicate the file was invalid.
 */
function indicateInvalidFile() {
    
    // Update file box.
    updateFileBox(undefined,
                  'Invalid file. Please check the list of acceptable file types.',
                  'invalid-file');
}

/**
 * Shows all of the tool buttons.
 */
function showToolButtons() {
    
    // Animate the tool button card out from behind the upload card.
    uploadCardRect = $('#upload-card')[0].getBoundingClientRect();
    revealTop = uploadCardRect.top + uploadCardRect.height + 20;
    
    // Note: If you don't set the z-index to above -1, the buttons will not be
    //       clickable. I don't know why. It's stupid and I hate it.
    $('#tool-buttons-card').animate({top: revealTop, "z-index": 0});
}

/**
 * Hides all of the tool buttons.
 */
function hideToolButtons() {
    
    // Animate the tool button card right behind the upload card.
    uploadCardRect = $('#upload-card')[0].getBoundingClientRect();
    hideTop = uploadCardRect.top;
    
    // Note: The z-index needs to be set immediately before the animation,
    //       otherwise it will not hide behind the upload card until after
    //       the animation completes. Still stupid. Still hate it.
    $('#tool-buttons-card').css({"z-index": -1}).animate({top: hideTop});
}