from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from threading import Thread
from .classification import classify_exe
from .malware_classifier.malware_classifier.exe.storage import ExeRawSample
from .malware_classifier.malware_classifier.storage import load_sample
from .models import File, Job, JobResult, _samples_folder

import json
import os

###############################################################################

@csrf_exempt
def check_results(request):
    """Check the results of a requested classification. If the classification
    has not been completed yet, all of the updates will be sent in the response
    instead.
    """
    
    # Check if an ID was supplied.
    if ('ID' not in request.GET):
        response = HttpResponse()
        response.status_code = 400 # Bad Request
        response.reason_phrase = ("No ID was passed. The ID used to start "
                                  "the classification job must be sent to "
                                  "check the progress. The ID should be "
                                  "passed in a parameter named 'ID'.")
        return response
        
    # Ensure a file exists with the specified ID.
    id = request.GET['ID']
    if (not File.objects.filter(file_name=id).exists()):
        response = HttpResponse()
        response.status_code = 400 # Bad Request
        response.reason_phrase = ('The passed ID was invalid. If the ID you '
                                  'sent was returned by a validate request, '
                                  'it is possible the ID has expired and the '
                                  'job was deleted.')
        
    # Retrieve the job for the requested file.
    file = File.objects.get(file_name=id)
    job = file.job
    
    # If the job is complete, send the results. Otherwise, send all of the
    # updates for the job.
    has_result = JobResult.objects.filter(job=job).exists()
    return job_results(request, job) if has_result else \
           job_updates(request, job)
        
def job_results(request, job):
    """Sends a response to the request containing the results for the specified
    job.
    
    Returns the response for the request.
    """
    
    # Retrieve the results for the job.
    result = job.jobresult
    
    # Send all of the result information in a request and indicate that the
    # job is finished.
    data = {'Finished':         True,
            'ClassName':        result.sample_class.name,
            'ClassDescription': result.sample_class.description,
            'ClassLink':        result.sample_class.link,
            'Confidence':       float(result.confidence),
            'SimilarSample':    result.similar_sample,
            'Similarity':       result.similarity,
            'Image':            result.image,
            'HexView':          result.hex_view,
            'AsmView':          result.asm_view}
            
    # Delete the job now that it's result has been retrieved.
    job.delete()
    
    return HttpResponse(json.dumps(data))
        
def job_updates(request, job):
    """Sends a response to the request containing all of the job updates for
    the specified job.
    
    Returns the response for the request.
    """
    
    # Retrieve all of the job updates for the job, ordered by the time they
    # were created.
    updates = job.jobupdate_set.all().order_by('time')
    updates = [update.message for update in updates]
    
    # Delete the updates so that they are not sent multiple times.
    job.jobupdate_set.all().delete()
    
    # Send a response including the updates and indicating that the job is
    # not yet finished.
    data = {'Finished': False, 'Updates': updates}
    return HttpResponse(json.dumps(data))

###############################################################################

@csrf_exempt
def classify(request):
    """Classify the requested file. The request should not include the file
    to classify; instead, the file should have already been uploaded when it
    was validated and the request should include the ID that the validation
    service responded with.
    """
    
    # Check if an ID was supplied.
    if ('ID' not in request.POST):
        response = HttpResponse()
        response.status_code = 400 # Bad Request
        response.reason_phrase = ('No ID was passed. The ID of the file to '
                                  'classify should have been returned by the '
                                  'validation service. You must send this ID '
                                  'with the parameter name \'ID\' when '
                                  'requesting classification')
        return response
        
    # Ensure a file exists with the specified ID.
    id = request.POST['ID']
    if (not File.objects.filter(file_name=id).exists()):
        response = HttpResponse()
        response.status_code = 400 # Bad Request
        response.reason_phrase = ('The passed ID was invalid. If the ID you '
                                  'sent was returned by a validate request, '
                                  'it is possible the ID has expired and the '
                                  'file was deleted.')
    
    # Create a job for the classification.
    job = Job()
    job.save()
    
    file = File.objects.get(file_name=id)
    file.job = job
    file.save()
    
    # Perform the job asynchronously in a new thread.
    Thread(target=perform_job, args=(file,)).start()
        
    # Indicate the classification job has started.
    response = HttpResponse(('The requested classification job has been '
                             'started. You can retrieve the progress of the '
                             'job by sending the file ID to the '
                             'classify/result service.'))
    response.status_code = 202 # Accepted
    return response    

def perform_job(file):
    """Perform the job for the specified file."""
    
    # Retrieve the job for the file.
    job = file.job
    
    # Load in the sample saved in the file.
    sample_path = os.path.join(_samples_folder, file.file_name)
    with load_sample(sample_path) as sample:
    
        # Determine which classification to perform.
        file_type = file.file_type
        if (file_type == 'exe'):
            classify_exe(sample, job)
    
###############################################################################

@csrf_exempt
def validate(request):
    """Validate that the sent file can be classified. If the file is valid, a
    response will be sent with the content "Valid". If the file is invalid, a
    response will be sent with the content "Invalid". If any error occurs,
    a proper status code will be set for the response.
    """
    
    # If no file was passed, send a failed status code.
    if ('file' not in request.FILES):
        response = HttpResponse()
        response.status_code = 400; # Bad Request
        response.reason_phrase = ("No file was passed. File is expected as a "
                                  "parameter named 'file' in a set of form "
                                  "data.")
        return response
    
    # Read in the file.
    contents = request.FILES['file'].read()
    
    # Check .exe format
    with ExeRawSample(data=contents) as exeSample:
        if (exeSample.validate()):
            return save_sample(request, exeSample, 'exe')
    
    # No valid format was found.
    response = HttpResponse(json.dumps({'Valid': False}))
    return response
    
def save_sample(request, sample, file_type):
    """Save the sample to a file and create a response for the specified
    request that indicates that the file was valid and includes the file's
    ID.
    
    Returns the created response.
    """
    
    # Save the sample in the files directory.
    sample.save(_samples_folder)
    
    # Add a record for the file in the database.
    File(file_name=sample.identifier, file_type=file_type).save()
    
    # Return a valid response with the sample's ID.
    response_content = {'Valid': True, 'ID': sample.identifier}
    return HttpResponse(json.dumps(response_content))
    